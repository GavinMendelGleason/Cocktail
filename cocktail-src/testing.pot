\ s:(nu S.(mu N.1 + N) * S).
   f s

where

f : (nu S.(mu N.1 + N) * S) -> (nu S.(mu N.1 + N) * S) = 
\ s:(nu S.(mu N.1 + N) * S).
   split unfold(s,nu S.(mu N.1 + N) * S)
   as (n,s')
   in {split unfold(s',nu S.(mu N.1 + N) * S)
       as (m,s'')
       in {case unfold(n,mu N.1 + N) of 
              {inl(z) =>
                fold((n,(f ((snoc m) s''))),nu S.(mu N.1 + N) * S)
              |inr(n') =>
                case unfold(m,mu N.1 + N) of 
                   {inl(z) =>
                     f ((snoc (pred n)) ((snoc m) s''))
                   |inr(m') =>
                     ((((f0 n) s'') m) n') m'}}}};

f0 : (mu N.1 + N) -> ((nu S.(mu N.1 + N) * S) -> ((mu N.1 + N) -> ((mu N.1 + N) -> ((mu N.1 + N) -> (nu S.(mu N.1 + N) * S))))) = 
\ n:(mu N.1 + N) s'':(nu S.(mu N.1 + N) * S) m:(mu N.1 + N) n':(mu N.1 + N) m':(mu N.1 + N).
   case unfold(n',mu N.1 + N) of 
      {inl(z) =>
        fold((n,(f ((snoc m) s''))),nu S.(mu N.1 + N) * S)
      |inr(n') =>
        case unfold(m',mu N.1 + N) of 
           {inl(z) =>
             f ((snoc (pred n)) ((snoc m) s''))
           |inr(m') =>
             ((((f0 n) s'') m) n') m'}};

