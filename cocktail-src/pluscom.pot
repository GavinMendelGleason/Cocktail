\ x : (nu N . 1+N) y : (nu N . 1+N) z : (nu N . 1+N) . plus (plus x y) z

where 

succ : (nu N . 1+N) -> (nu N . 1+N) = 
     \ x : (nu N . 1+N) . 
         fold(inr(x,1+(nu N . 1+N)),nu N . 1+N);

plus : (nu N . 1+N) -> (nu N . 1+N) -> (nu N. 1+N) = 
     \ x : (nu N . 1+N) y : (nu N.1+N) . 
         case unfold(x,(nu N . 1+N)) of 
           { inl(z) => y  
           | inr(x') => succ (plus x' y)};
     
